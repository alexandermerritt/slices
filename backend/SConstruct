#! /usr/bin/env python

"""@file SConstruct
   @author Magdalena Slawinska magg@gatech.edu
   @date 2011-02-22
   @brief Building the network stuff
"""

import os
import commands
import sys

Import('CUDA_ROOT')


def get_platform_characteristic_str():
    """
        @todo It should be imported like something
        from ...SConstruct import get_platform_characteristic
        but I need time to figure out how to do this
       intended to get the characteristic string to allow for automatic
       recognition of the platform and applied customized build environment
       @return: the characteristic string for the platform
       @rtype: string
    """    
    nodename = commands.getoutput('uname -n') # doesn't work on keeneland
    return nodename

CCFLAGS_WARN='-Wall -Wextra -Werror -Wno-unused-parameter -Wno-unused-function '
GLOBAL_CCFLAGS='-ggdb ' + CCFLAGS_WARN
#GLOBAL_CCFLAGS='-O3 ' + CCFLAGS_WARN

########################################################333
# here we define the environments for particular nodes
#######################################################3
# environment for the Keeneland and prost
envBackendKeeneland = Environment(
      LIBS=['pthread', 'rt', 'dl', 'cudart' ],
      LIBPATH=[CUDA_ROOT + 'lib64'],
      CPPPATH=['.', '../include', CUDA_ROOT + 'include', ],
	  CCFLAGS=GLOBAL_CCFLAGS
	  )

# env for Prost, GT machine
envBackendProst = envBackendKeeneland

# Shiva, GT machine
envBackendShiva = Environment(
      CC='/usr/local/bin/gcc4.4.4',
      LIBS=['pthread', 'rt', 'dl', 'uuid', 'cudart', 'cuda', 'shmgrp'],
      LIBPATH=[CUDA_ROOT + 'lib64'],
      CPPPATH=['.', '../include', '../interposer', CUDA_ROOT + 'include', ],
	  CCFLAGS=GLOBAL_CCFLAGS)

# Ifrit, GT machine
envBackendIfrit = envBackendShiva

#############################################
# end of environment definitions
##########################################3


def build_backend(env):
    srclist = ['assembly/assembly.c', 'assembly/assemble.c', 'assembly/rpc.c',
			'assembly/export.c', '../common/io/sock.c', '../common/cuda/execute.c',
			'../common/cuda/rpc.c', '../common/cuda/marshal.c']
    env.Program('runtime', ['runtime.c', srclist])
    env.Program('localsink', ['localsink.c', srclist])
    env.Program('assembly/remotesink', ['assembly/remotesink.c', srclist])


def build_program():
    global envBackendKeeneland
    global envBackendProst
    global envBackendShiva
    global envBackendIfrit
    
    # try to recognize the machine
    nodename = get_platform_characteristic_str()
    
    if nodename.startswith('kid'):
        build_backend(envBackendKeeneland)
    elif nodename.startswith('prost'):
        build_backend(envBackendProst)
    elif nodename.startswith('shiva'):
        build_backend(envBackendShiva)
    elif nodename.startswith('ifrit'):
        build_backend(envBackendIfrit)
    else:
        print("Error: Define build environment for this machine in backend/SConstruct")
        sys.exit()


# build the program
build_program()

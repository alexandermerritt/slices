#! /usr/bin/env python

"""@file SConstruct
   @author Magdalena Slawinska magg@gatech.edu
   @date 2011-02-22
   @brief Building the network stuff
"""

import os
import commands
import sys

Import('CUDA_ROOT', 
       'GLIB20')


def get_platform_characteristic_str():
    """
        @todo It should be imported like something
        from ...SConstruct import get_platform_characteristic
        but I need time to figure out how to do this
       intended to get the characteristic string to allow for automatic
       recognition of the platform and applied customized build environment
       @return: the characteristic string for the platform
       @rtype: string
    """    
    nodename = commands.getoutput('uname -n') # doesn't work on keeneland
    return nodename
    

########################################################333
# here we define the environments for particular nodes
#######################################################3
# environment for the Keeneland and prost
envBackendKeeneland = Environment(
      LIBS=['pthread', 
            'rt', 
            'dl', 
            'cudart', 
            'glib-2.0' ],
      LIBPATH=[CUDA_ROOT + 'lib64',
               GLIB20 + 'lib'],
      CPPPATH=['.',
      '../remote',
      '../include',
      '../interposer',
      '../backend',
      CUDA_ROOT + 'include',
      GLIB20 + 'include/glib-2.0',
      GLIB20 + 'include/gio-unix-2.0',
      GLIB20 + 'lib/glib-2.0/include'
      ],
      CCFLAGS='-g -Wall -Wextra')

# env for Prost, GT machine
envBackendProst = envBackendKeeneland

# Shiva, GT machine
envBackendShiva = Environment(
      LIBS=['pthread', 
            'rt', 
            'dl', 
            'cudart', 
            'glib-2.0' ],
      LIBPATH=[CUDA_ROOT + 'lib64'],
      CPPPATH=['.',
      '../remote',
      '../include',
      '../interposer',
      '../backend',
      CUDA_ROOT + 'include',
      '/usr/include/glib-2.0',
      '/usr/include/gio-unix-2.0',
      '/usr/lib/glib-2.0/include'
      ],
      CCFLAGS='-g -Wall -Wextra')

# Ifrit, GT machine
envBackendIfrit = Environment(
      LIBS=['pthread', 
            'rt', 
            'dl', 
            'cudart', 
            'glib-2.0' ],
      LIBPATH=[CUDA_ROOT + 'lib64'],
      CPPPATH=['.',
      '../remote',
      '../include',
      '../interposer',
      '../backend',
      CUDA_ROOT + 'include',
      '/usr/include/glib-2.0',
      '/usr/include/gio-unix-2.0',
      '/usr/lib/glib-2.0/include'
      ],
      CCFLAGS='-g -Wall -Wextra')

#############################################
# end of environment definitions
##########################################3


def build_backend(env):
    """
        @param env: The environment that will be used to build a backend 
    """
    env.Program('runtime', [
            'runtime.c',
            '../interposer/libciutils.c',
            '../include/kidron_common_f.c',
			'../common/libregistration.c'])


def build_program():
    """
       builds the program depending on the characteristics
    """
    global envBackendKeeneland
    global envBackendProst
    global envBackendShiva
    global envBackendIfrit
    
    # try to recognize the machine
    nodename = get_platform_characteristic_str()
    
    if nodename.startswith('kid'):
        build_backend(envBackendKeeneland)
    elif nodename.startswith('prost'):
        build_backend(envBackendProst)
    elif nodename.startswith('shiva'):
        build_backend(envBackendShiva)
    elif nodename.startswith('ifrit'):
        build_backend(envBackendIfrit)
    else:
        print("Error: Define build environment for this machine in backend/SConstruct")
        sys.exit()


# build the program
build_program()

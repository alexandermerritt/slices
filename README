/**
 * @file README.txt
 * @brief 
 *
 * @date Apr 12, 2011
 * @author Magda Slawinska (Magic MS), magg __at_ gatech __dot_ edu
 */
 
 00. Contributors
 
 This piece of software has been 'compiled' by Magic eMeS (Magda Slawinska), 
 as part of the non-virtualized Keeneland standard software. 
 The software has been developed based on the software for the virtualized case
 Pegasus and Shadowfax for which credits go to:
 
 Vishakha Gupta
 Alex Merritt
 Abhishek Verma
 
 Magic MS ported the virtualized-based software to a non-virtualized case.
 
 0. Tested configurations:
 
 - CentOS release 5.5 (Final),  
 - 2.6.18-194.32.1.el5 #1 SMP Wed Jan 5 17:52:25 EST 2011 x86_64 x86_64 x86_64 GNU/Linux
 - gcc (GCC) 4.1.2 20080704 (Red Hat 4.1.2-48)
 - scons --version
        script: v2.0.1.r5134, 2010/08/16 23:02:40, by bdeegan on cooldog
        engine: v2.0.1.r5134, 2010/08/16 23:02:40, by bdeegan on cooldog
 - Cuda compilation tools, release 3.2, V0.2.1221 (nvcc --version)
 - nvidia-settings:  version 260.19.14 (nvidia-settings --help)
 - Hardware:
  
   -- Fermi: There is 1 device supporting CUDA
       Device 0: "Tesla C2050"
   -- GeForce: There are 2 devices supporting CUDA 
     Device 0: "GeForce 9800 GX2"     
     Device 1: "GeForce 9800 GX2"
   
 
 1. Dependencies
 
 a. Scons - the build system
 b. Installed CUDA Toolkit for
    - libcudart.a (or something)
    - some includes cuda_runtime_api.h, __cuda_format.h
    - nvcc compiler 
 c. cunit212 - for tests
 d. iniparser to parse the config file 
    http://ndevilla.free.fr/iniparser/
    You need to update two SConstruct files:
    
    @todo this must be a smarter way to do that
    interposer/SConstruct
    backend/SConstruct
 e. glib 
 
 	- glib 2.0 - currently used (you need a devel package and a lib package)
 	  -- includes: -I/usr/include/glib-2.0
				   -I/usr/lib64/glib-2.0/include
	  -- path to libraries 
	      -L /lib64 (likely it is set by default)
 	  -- link with -lglib-2.0
    - it shouldn't be issues with glib 1.2 (I also used glib-1.2 in early
      stages and it worked).
      -- for options to set in build files run
      glib-config --cflags 
      -- for the linker you need to link with -lglib
    
   
 
 2. Building
 
 a. unpack sources
 b. run scons -Q (quiet - doesn't show scons information)
 
 c. You should get
 interposer/libci.so    # the interposer library
 backend/backend		# which is the remote part
 cuda-app/add			# the simple cuda app that uses a few CUDA calls
 
 To clean the build
 
 a. scons -c
 
 
 3. Running the examples
 
 First you need to configure the environment by providing the correct
 values to the configuration file. The name of the configuration file
 is hard-coded in 
 
 include/config.h

#ifndef KIDRON_INI
#	define KIDRON_INI "kidron.ini"
#endif

The file is called kidron.ini and should be present in the current directory.

The kidron.ini with example values is as presented below:

# ---------- start of kidron.ini -------------- 
# The configuration file for the kidron system
#

[network]

# tells where the backend is running
remote  = cuda2.cc.gt.atl.ga.us ;


[interposer]

# tells if the functions should be called locally or not
local   = no ;
 
#
# --------- end of kidron.ini -----------------
#
 
The file is required to be present on the local side and it tells the 
interposer library where the backend runs.

You have to tell the interposer library where the backend runs. 
If your backend is running somewhere else, you need to change it to where
the backend is running; you do not need to configure anything on the server
side. Just the client, i.e., the interposer library (libci.c).
 
 a. included example 
 
 on one machine let's say cuda2 run backend:
 
 cuda2$ /home/magg/proj/kidron-utils-remote-cuda-exec-2/backend/backend
 
 on the second machine run the app:
 
 prost:kidron$  LD_PRELOAD=/home/magg/kidron/interposer/libci.so cuda-app/add
 
 b. you can run the examples from NVIDIA_SDK. I tested the 
   - matrixMul
   - BlackSholes 
 
 cuda2$ /home/magg/proj/kidron-utils-remote-cuda-exec-2/backend/backend
 
 prost$  LD_PRELOAD=/home/magg/kidron/interposer/libci.so \
       /home/magg/NVIDIA_GPU_Computing_SDK/C/bin/linux/release/matrixMul
 
 or 
 
 cuda2$ /home/magg/proj/kidron-utils-remote-cuda-exec-2/backend/backend
 
 prost$  LD_PRELOAD=/home/magg/kidron/interposer/libci.so \
       /home/magg/NVIDIA_GPU_Computing_SDK/C/bin/linux/release/BlackScholes
       
 
 4. running tests
 # you mind need to setup the cunit lib:
 # export LD_LIBRARY_PATH=/opt/cunit212/lib/:$LD_LIBRARY_PATH
 [magg@prost interposer]$ 
   valgrind --leak-check=yes --track-origins=yes ./testLibciutils
   
   
4. KNOWN ISSUES
* Function g_vars_find my hang if you provide non-existing address as 
  a symbol; since it first assumes it is a pointer, then it is a string 

